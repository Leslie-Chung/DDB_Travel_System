<?xml version="1.0" ?>
<!DOCTYPE tests [
        <!ELEMENT tests (test)+>
        <!ATTLIST test
                id         ID            #REQUIRED
                cleardata  (true|false)  "true"
                fpoints    CDATA         "3"
                fnext      IDREF         #IMPLIED>
        ]>

<!-- Project Part 1 -->

<tests totalpoints="47">
    <!-- Transaction -->
    <test id="Transaction_WriteRead" fpoints="1">
        1. add..应该获取所有必要的锁。
        2. query..应该首先等待锁，然后从磁盘读取数据。
    </test>

    <test id="Transaction_DeadLock" fpoints="1">
        死锁
    </test>

    <test id="Transaction_ReverseQuery" fpoints="1">
        语义测试查询之间的添加操作。
        预订时应记录价格。
    </test>

    <test id="Transaction_Atomicity" fpoints="1">
        事务原子性测试。
        如果未完成，则不应执行事务。
    </test>

    <test id="Transaction_Consistency" fpoints="1">
        事务一致性测试。
    </test>

    <test id="Transaction_Isolation" fpoints="1">
        事务隔离性测试。
    </test>

    <!-- failed -->
    <test id="Transaction_Duration" fpoints="1">
        事务持久性测试。
    </test>

    <test id="Transaction_DeleteCustomer" fpoints="1">
        删除客户。
    </test>

    <test id="Transaction_DeleteAddQueryCustomer" fpoints="1">
        删除客户然后中止,接着添加新客户，查询中止前和中止后的客户。
    </test>

    <test id="Transaction_DeleteAddQuery2Customer" fpoints="1">
        删除客户然后添加新的同名客户，查询在第一次添加和第一次删除之间的客户，
        然后查询在第一次删除和第二次添加之间的客户。
    </test>

    <test id="Transaction_DeadLock3" fpoints="1">
        三线程死锁检测。
    </test>

    <test id="Transaction_LiveLock" fpoints="1">
        测试活锁。
    </test>

    <test id="Transaction_Bound" fpoints="1">
        测试边界条件。
    </test>

    <test id="Transaction_Delete" fpoints="1">
        测试在删除有限制的Resource。
    </test>


    <!-- Basic tests -->

    <test id="Basic_start" fpoints="1" fnext="_END_">
        start() 调用失败。
    </test>

    <test id="Basic_start_commit" fpoints="1" fnext="_END_">
        无法提交没有任何操作的事务。
    </test>

    <test id="Basic_start_abort" fpoints="1" fnext="_END_">
        无法中止没有任何操作的事务。
    </test>

    <test id="Basic_add" fpoints="1" fnext="_END_">
        无法添加 flight/rooms/cars/customer。
    </test>

    <test id="Basic_add_commit" fpoints="1" fnext="_END_">
        添加 flight/rooms/cars/customer后提交失败。
    </test>

    <test id="Basic_add_commit_read" fpoints="1" fnext="_END_">
        flight/rooms/cars/customer 的查询没有返回正确的结果。
    </test>

    <test id="Basic_add_commit_reserve" fpoints="1" fnext="_END_">
        无法预订。
    </test>

    <test id="Basic_add_abort" fpoints="1" fnext="_END_">
        添加 flight/rooms/cars/customer后中止失败.
    </test>

    <test id="Basic_add_abort_read" fpoints="1" fnext="_END_">
        flight/rooms/cars/customer 的查询在中止后没有返回正确的结果。
    </test>


    <!--   Semantic tests-->

    <!-- failed -->
    <test id="Semantic_add_commit_delete_commit" fpoints="1">
        无法删除条目。
    </test>

    <test id="Semantic_bill">
        无法计算正确的账单。
    </test>

    <test id="Semantic_itinerary_commit">
        reserveItinerary提交后查询结果不正确。
    </test>

    <test id="Semantic_itinerary_abort">
        reserveItinerary中止后查询结果不正确。
    </test>

    <test id="Semantic_itinerary_fail">
        reserveItinerary 失败后状态未恢复。
    </test>

    <test id="Semantic_add_read">
        无法查询同一事务中先前添加的项目。
    </test>

    <test id="Semantic_badxid">
        伪造的 xid 不会抛出 InvalidTransactionException。
    </test>


    <!--   Locking tests-->

    <test id="Lock_concurrent" fpoints="1">
        两个不冲突的并发事务失败。
    </test>

    <test id="Lock_itinerary1">
        reserveItinerary 没有获取所有必要的锁。
    </test>

    <test id="Lock_itinerary2">
        reserveItinerary 没有获取所有必要的锁。
    </test>

    <!-- failed -->
    <test id="Lock_itinerary13">
        reserveItinerary 没有获取所有必要的锁。
    </test>

    <test id="Lock_deadlock" fpoints="1">
        死锁事务没有中止。
    </test>


    <!-- Failure tests -->

    <!-- failed -->
    <test id="Failure_dieAll" fpoints="1">
        所有组件宕机后，之前提交的事务都会丢失。
    </test>

    <!-- failed -->
    <test id="Failure_dieRM" fpoints="1">
        RM宕机后，事务不会被强制中止。
    </test>

    <!-- failed -->
    <test id="Failure_dienpRM" fpoints="1">
        非参与者RM宕机后，事务无法提交。
    </test>

    <!-- failed -->
    <test id="Failure_dieWC" fpoints="1">
        WC宕机后，事务无法提交。
    </test>

    <test id="Failure_dieTM" fpoints="1">
       TM宕机后，事务不会被强制中止。
    </test>

    <!-- failed -->
    <test id="Failure_dieRMAfterEnlist" fpoints="1">
       在Enlist后RM宕机: 事务不会被强制中止。
    </test>

    <!-- failed -->
    <test id="Failure_dieRMBeforePrepare" fpoints="1">
        在Prepare之前RM宕机: 事务不会被强制中止。
    </test>

    <!-- failed -->
    <test id="Failure_dieRMAfterPrepare" fpoints="1">
        在Prepare之后RM宕机: 事务不会被强制中止。
    </test>

    <test id="Failure_dieTMBeforeCommit" fpoints="1">
        在Commit之前TM宕机: 事务不会被强制中止。
    </test>

    <!-- failed -->
    <test id="Failure_dieTMAfterCommit" fpoints="1">
        在Commit之后TM宕机: 事务没有提交。
    </test>

    <!-- failed -->
    <test id="Failure_dieRMBeforeCommit" fpoints="1">
        在Commit之前RM宕机Commit: RM 无法正常恢复。
    </test>

    <test id="Failure_unlock" fpoints="1">
        RM 在最终Commit之前释放锁。
    </test>

</tests>
